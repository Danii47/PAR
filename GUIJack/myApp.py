#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Wed May  8 12:23:49 2024
#


from externo import CartaBase, Mazo, Estrategia
import wx
import random

class COLOURS:
    SELECTED = wx.Colour(236,247,181)#* | Color inicial proponido por dani: (255, 250, 194)
    PASSED = wx.Colour(255,105,97)#! Final: (234,23,47) | Color inicial proponido por dani: (255, 50, 50)
    CLOSED = wx.Colour(27,27,27)#? Final: (27,27,27) - Cambiar el color del textoa a blanco| Color inicial proponido por dani: (50, 50, 50)
    NONSELECTED = wx.Colour(237, 237, 237)
    WHITE = wx.Colour(250,250,250)
    BLACK = wx.Colour(10,10,10)
    WON = wx.Colour(48, 194, 48)
    LOST = wx.Colour(255, 105, 97)
    COUNTDOWN = wx.Colour(255, 22, 0)

class HAND_STATES:
    ACTIVE = "ACTIVA"
    PASSED = "PASADA"
    CLOSED = "CERRADA"

class GAME_MODES:
    MANUAL = "MANUAL"
    AUTOMATIC = "AUTOMATICO"

# region Card
class Card(CartaBase):
    def __init__(self, ind: int) -> None:
        super().__init__(ind)
        self.ind = ind
        self.img = wx.Bitmap()
        self.img.LoadFile(f"./imgs/cards/m{ind:02d}.png")

    def getCardBitmap(self):
        return self.img
# endregion

class Hand():
    def __init__(self, panel, sizer, staticText, cards: list[Card] = None, bet = 0, state = HAND_STATES.ACTIVE) -> None:
        self.sizer = sizer
        self.staticText = staticText
        self.panel = panel
        self.bet = bet
        self.cards = [] if not cards else cards
        self.state = state

    def getValue(self) -> int:

        handValue: int = 0
        countOfAces: int = 0

        for card in self.cards:
            handValue += card.valor
            if card.valor == 1:
                countOfAces += 1
        
        if countOfAces > 0 and handValue + 10 <= 21:
            handValue += 10

        return handValue
    
    def giveCard(self, player, deck, amount, selectPanel):

        for _ in range(amount):
            cardToAdd = deck.reparte()
            self.cards.append(cardToAdd)
            if self.getValue() > 21:
                self.state = HAND_STATES.PASSED
            

            cardBitmap = self.cards[-1].getCardBitmap()
            staticBitMap = wx.StaticBitmap(self.getPanel(), wx.ID_ANY, cardBitmap)
            staticBitMap.Bind(wx.EVT_LEFT_UP, lambda event: selectPanel(event, player, self))

            self.sizer.Add(staticBitMap, 0, 0, 0)
        
        self.updateText(player)
        self.updateColor()
        self.panel.Layout()

    def updateColor(self):
        if self.getState() == HAND_STATES.PASSED:
            self.panel.SetBackgroundColour(COLOURS.PASSED)
        elif self.getState() == HAND_STATES.CLOSED:
            self.panel.SetBackgroundColour(COLOURS.CLOSED)

        self.panel.Refresh()

    def updateText(self, player):
        self.staticText.SetLabel(f"{"CROUPIER" if player.isCroupier else f"({self.getValue()})"}\n{f"({self.getValue()})" if player.isCroupier else f"{self.getBet()}€"}\n{self.getState()}")

        if self.getState() == HAND_STATES.PASSED or self.getState() == HAND_STATES.CLOSED:
            self.staticText.SetForegroundColour(COLOURS.WHITE)


    def renderHandPanel(self, player, selectPanel):

        self.panel.DestroyChildren()
        self.updateColor()

        self.staticText = wx.StaticText(self.panel, wx.ID_ANY, f"{"CROUPIER" if player.isCroupier else f"({self.getValue()})"}\n{f"({self.getValue()})" if player.isCroupier else f"{self.getBet()}€"}\n{self.getState()}", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.staticText.SetMinSize((145, 200))
        self.staticText.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        
        self.staticText.Bind(wx.EVT_LEFT_UP, lambda event: selectPanel(event, player, self))

        self.sizer.Add(self.staticText, 0, wx.ALL, 10)

        for card in self.cards:
            cardBitmap = card.getCardBitmap()
            staticBitMap = wx.StaticBitmap(self.panel, wx.ID_ANY, cardBitmap)
            staticBitMap.Bind(wx.EVT_LEFT_UP, lambda event: selectPanel(event, player, self))
            
            self.sizer.Add(staticBitMap, 0, 0, 0)

        self.panel.Refresh()
        self.sizer.Layout()

    def setState(self, state):
        self.state = state

    def getState(self):
        return self.state

    def getBet(self):
        return self.bet
    
    def setBet(self, bet):
        self.bet = bet

    def getPanel(self):
        return self.panel

class Player():
    def __init__(self, hands: list[Hand] = None, isCroupier = False):
        self.hands = [] if not hands else hands
        self.isCroupier = isCroupier

    def addHand(self, hand):
        self.hands.append(hand)

    def anyHandOpen(self):
        return any(hand.getState() == HAND_STATES.ACTIVE for hand in self.hands)


class MainWindow(wx.Frame):
    DEFAULT_COUNTDOWN = 5

    def __init__(self, parent, id, title, player):

        self.selectedBet = 2
        self.handSelected = None
        self.gamePlayer = player
        self.deck = None
        self.gameMode = GAME_MODES.MANUAL
        self.gameCounter = 1
        self.globalBalance = 0
        self.gameBalance = 0
        self.countdown = MainWindow.DEFAULT_COUNTDOWN

        # begin wxGlade: mainWindow.__init__
        wx.Frame.__init__(self, parent, id, title)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.handleTimer)

        self.SetTitle("Blackjack - PARADIGMAS DE PROGRAMACIÓN - GRUPO 3 - 2024")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))

        self.statusBar = self.CreateStatusBar(2)
        self.statusBar.SetStatusWidths([-1, 0])

        statusBar_fields = ["Selecciona jugada", ""]
        for i in range(len(statusBar_fields)):
            self.statusBar.SetStatusText(statusBar_fields[i], i)

        gameSizer = wx.BoxSizer(wx.HORIZONTAL)

        gameOptionsSizer = wx.BoxSizer(wx.VERTICAL)
        gameSizer.Add(gameOptionsSizer, 10, wx.EXPAND, 0)

        gameModeSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Modo de juego"), wx.HORIZONTAL)
        gameOptionsSizer.Add(gameModeSizer, 7, wx.ALL | wx.EXPAND, 9)

        self.manualButton = wx.RadioButton(self, wx.ID_ANY, "Manual")
        self.manualButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameModeSizer.Add(self.manualButton, 60, wx.ALIGN_CENTER_VERTICAL, 0)

        self.automaticButton = wx.RadioButton(self, wx.ID_ANY, u"Automático")
        self.automaticButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameModeSizer.Add(self.automaticButton, 40, wx.ALIGN_CENTER_VERTICAL, 0)

        gameDelaySizer = wx.BoxSizer(wx.HORIZONTAL)
        gameOptionsSizer.Add(gameDelaySizer, 6, wx.ALL | wx.EXPAND, 9)

        delayText = wx.StaticText(self, wx.ID_ANY, "Retardo:")
        delayText.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameDelaySizer.Add(delayText, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        self.delayInput = wx.TextCtrl(self, wx.ID_ANY, "25", style=wx.TE_CENTRE)
        self.delayInput.SetMinSize((65, 23))
        gameDelaySizer.Add(self.delayInput, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 10)

        msText = wx.StaticText(self, wx.ID_ANY, "ms.")
        msText.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameDelaySizer.Add(msText, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        gameActionSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"Acción"), wx.VERTICAL)
        gameOptionsSizer.Add(gameActionSizer, 17, wx.ALL | wx.EXPAND, 9)

        self.askButton = wx.Button(self, wx.ID_ANY, "PEDIR")
        self.askButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.askButton.Disable()

        gameActionSizer.Add(self.askButton, 25, wx.ALL | wx.EXPAND, 2)

        self.doubleButton = wx.Button(self, wx.ID_ANY, "DOBLAR")
        self.doubleButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.doubleButton.Disable()

        gameActionSizer.Add(self.doubleButton, 25, wx.ALL | wx.EXPAND, 2)

        self.closeButton = wx.Button(self, wx.ID_ANY, "CERRAR")
        self.closeButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.closeButton.Disable()

        gameActionSizer.Add(self.closeButton, 25, wx.ALL | wx.EXPAND, 2)

        self.splitButton = wx.Button(self, wx.ID_ANY, "SEPARAR")
        self.splitButton.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        self.splitButton.Disable()

        gameActionSizer.Add(self.splitButton, 25, wx.ALL | wx.EXPAND, 2)

        self.separatorPanel = wx.Panel(self, wx.ID_ANY)
        gameOptionsSizer.Add(self.separatorPanel, 15, wx.EXPAND, 0)

        gameCounterSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Partida"), wx.HORIZONTAL)
        gameOptionsSizer.Add(gameCounterSizer, 7, wx.ALL | wx.EXPAND, 9)

        gameCounterText = wx.StaticText(self, wx.ID_ANY, f"{self.gameCounter}", style=wx.ALIGN_CENTER_HORIZONTAL)
        gameCounterText.SetFont(wx.Font(25, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameCounterSizer.Add(gameCounterText, 100, wx.ALIGN_CENTER_VERTICAL, 0)

        gameGlobalBalanceSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Balance global"), wx.HORIZONTAL)
        gameOptionsSizer.Add(gameGlobalBalanceSizer, 7, wx.ALL | wx.EXPAND, 9)

        globalBalanceText = wx.StaticText(self, wx.ID_ANY, f"+{self.globalBalance} €", style=wx.ALIGN_CENTER_HORIZONTAL)
        globalBalanceText.SetForegroundColour(COLOURS.WON)
        globalBalanceText.SetFont(wx.Font(25, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameGlobalBalanceSizer.Add(globalBalanceText, 100, wx.ALIGN_CENTER_VERTICAL, 0)

        gameBalanceSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Balance partida actual"), wx.HORIZONTAL)
        gameOptionsSizer.Add(gameBalanceSizer, 7, wx.ALL | wx.EXPAND, 9)

        gameBalaneText = wx.StaticText(self, wx.ID_ANY, f"+{self.gameBalance} €", style=wx.ALIGN_CENTER_HORIZONTAL)
        gameBalaneText.SetForegroundColour(COLOURS.WON)
        gameBalaneText.SetFont(wx.Font(25, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        gameBalanceSizer.Add(gameBalaneText, 100, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gameCountdownSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, u"Cuenta atrás"), wx.HORIZONTAL)
        gameOptionsSizer.Add(self.gameCountdownSizer, 7, wx.ALL | wx.EXPAND, 9)

        self.countDownText = wx.StaticText(self, wx.ID_ANY, f"{self.countdown}", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.countDownText.SetFont(wx.Font(25, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        self.gameCountdownSizer.Add(self.countDownText, 100, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gamePanel = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.gamePanel.SetBackgroundColour(COLOURS.NONSELECTED)
        self.gamePanel.SetScrollRate(10, 10)
        gameSizer.Add(self.gamePanel, 90, wx.EXPAND, 0)

        self.gamePanelSizer = wx.BoxSizer(wx.VERTICAL)


        self.gamePanel.SetSizer(self.gamePanelSizer)

        self.SetSizer(gameSizer)
        gameSizer.Fit(self)
        gameSizer.SetSizeHints(self)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_RADIOBUTTON, self.handleClickManualButton, self.manualButton)
        self.Bind(wx.EVT_RADIOBUTTON, self.handleClickAutomaticButton, self.automaticButton)
        self.Bind(wx.EVT_BUTTON, self.handleClickAskButton, self.askButton)
        self.Bind(wx.EVT_BUTTON, self.handleClickDoubleButton, self.doubleButton)
        self.Bind(wx.EVT_BUTTON, self.handleClickCloseButton, self.closeButton)
        self.Bind(wx.EVT_BUTTON, self.handleClickSplitButton, self.splitButton)
        # end wxGlade


    def handleTimer(self, _):
        self.countdown -= 1
        self.countDownText.SetLabel(f"{self.countdown}")
        
        if self.countdown <= 3:
            self.countDownText.SetForegroundColour(COLOURS.COUNTDOWN)
            

        if self.countdown < 0:
            self.selectRandomAction()
            self.countdown = MainWindow.DEFAULT_COUNTDOWN
            self.countDownText.SetLabel(f"{self.countdown}")
            self.countDownText.SetForegroundColour(COLOURS.BLACK)
            if not self.gamePlayer.anyHandOpen():
                self.timer.Stop()

        self.gameCountdownSizer.Layout()

    def selectRandomAction(self):
        options = ["PEDIR", "DOBLAR", "CERRAR"]
        
        possibleHands = list(filter(lambda hand: hand.getState() == HAND_STATES.ACTIVE, self.gamePlayer.hands))

        self.handSelected = possibleHands[random.randint(0, len(possibleHands) - 1)]
        
        if len(self.handSelected.cards) == 2 and self.handSelected.cards[0].valor == self.handSelected.cards[1].valor:
            options.append("SEPARAR")

        randomAction = random.choice(options)

        if randomAction == "PEDIR":
            self.handleClickAskButton(None)
        elif randomAction == "DOBLAR":
            self.handleClickDoubleButton(None)
        elif randomAction == "CERRAR":
            self.handleClickCloseButton(None)
        elif randomAction == "SEPARAR":
            self.handleClickSplitButton(None)

    def handleClickManualButton(self, _):
        self.gameMode = GAME_MODES.MANUAL

    def handleClickAutomaticButton(self, _):
        self.gameMode = GAME_MODES.AUTOMATIC

    # ! BOTÓN DE PEDIR CARTA
    def handleClickAskButton(self, _):
        self.handSelected.giveCard(self.gamePlayer, self.deck, 1, self.selectPanel)

        if self.handSelected.getState() == HAND_STATES.PASSED:
            self.removeHandSelected()

    # ! BOTÓN DE DOBLAR APUESTA
    def handleClickDoubleButton(self, _):
        self.handSelected.setBet(self.handSelected.getBet() * 2)
        self.handSelected.setState(HAND_STATES.CLOSED)

        self.handSelected.giveCard(self.gamePlayer, self.deck, 1, self.selectPanel)

        self.removeHandSelected()

    # ! BOTÓN DE CERRAR MANO
    def handleClickCloseButton(self, _):
        self.handSelected.setState(HAND_STATES.CLOSED)

        self.handSelected.updateColor()
        self.handSelected.updateText(self.gamePlayer)

        self.removeHandSelected()

    # ! BOTÓN DE SEPARAR MANO
    def handleClickSplitButton(self, _):

        self.handSelected.getPanel().SetBackgroundColour(COLOURS.NONSELECTED)
        self.handSelected.getPanel().Refresh()

        self.addHandToGamePanel(self.gamePlayer, bet = self.handSelected.getBet(), cards = [self.handSelected.cards.pop()])

        self.handSelected.renderHandPanel(self.gamePlayer, self.selectPanel)
        self.gamePlayer.hands[-1].renderHandPanel(self.gamePlayer, self.selectPanel)

        self.removeHandSelected()

    def removeHandSelected(self):
        self.askButton.Disable()
        self.doubleButton.Disable()
        self.closeButton.Disable()
        self.splitButton.Disable()
        self.handSelected = None


    def addHandToGamePanel(self, player, bet = 0, cards = None):

        handPanel = wx.Panel(self.gamePanel, len(player.hands), style=wx.TAB_TRAVERSAL, size=wx.Size(0, 120))
        newSizer = wx.BoxSizer(wx.HORIZONTAL)
        handPanel.SetSizer(newSizer)

        self.gamePanelSizer.Add(handPanel, 0, wx.EXPAND, 0)

        newSizerText = wx.StaticText(handPanel, wx.ID_ANY, "", style=wx.ALIGN_CENTER_HORIZONTAL)
        newSizerText.SetMinSize((145, 200))
        newSizerText.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
        newSizerText.SetForegroundColour(COLOURS.BLACK)

        newSizerText.Bind(wx.EVT_LEFT_UP, lambda event: self.selectPanel(event, player, newHand))
        newSizer.Add(newSizerText, 0, wx.ALL, 10)

        if cards is not None:
            for card in cards:

                cardBitmap = card.getCardBitmap()
                staticBitMap = wx.StaticBitmap(handPanel, wx.ID_ANY, cardBitmap)
                staticBitMap.Bind(wx.EVT_LEFT_UP, lambda event: self.selectPanel(event, player, newHand))

                newSizer.Add(staticBitMap, 0, 0, 0)

        newHand = Hand(handPanel, newSizer, newSizerText, cards = cards, bet = bet)

        handPanel.Bind(wx.EVT_LEFT_UP, lambda event: self.selectPanel(event, player, newHand))

        player.addHand(newHand)

        self.gamePanel.Layout()
        

    
    def selectPanel(self, event, player, hand):
        if player.isCroupier:
            return

        if hand.getState() == HAND_STATES.PASSED or hand.getState() == HAND_STATES.CLOSED:
            return

        self.askButton.Enable()
        self.doubleButton.Enable()
        self.closeButton.Enable()

        if len(hand.cards) == 2 and hand.cards[0].valor == hand.cards[1].valor:
            self.splitButton.Enable()
        else:
            self.splitButton.Disable()

        if self.handSelected:
            self.handSelected.getPanel().SetBackgroundColour(COLOURS.NONSELECTED)
            self.handSelected.getPanel().Refresh()

        hand.getPanel().SetBackgroundColour(COLOURS.SELECTED)
        hand.getPanel().Refresh()

        self.handSelected = hand

    def isBlackjack(self):
       blackJackPopUp = BlackJackPopUp(self, wx.ID_ANY, "")
        
       self.timer.Stop()
       blackJackPopUp.ShowModal()

    def getSelectedBet(self):
        return self.selectedBet


# end of class mainWindow

class ChooseBet(wx.Dialog):
    def __init__(self, parent, id):
        # begin wxGlade: ChooseBet.__init__
        wx.Dialog.__init__(self, parent, id, "")

        self.SetSize((220, 250))
        self.SetTitle("Nueva partida")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        chooseBetSizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Elija su apuesta"), wx.VERTICAL)
        sizer_1.Add(chooseBetSizer, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 17)

        self.lowBet = wx.RadioButton(self, 2, u"2€ ")
        self.lowBet.SetValue(1)
        chooseBetSizer.Add(self.lowBet, 33, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.mediumBet = wx.RadioButton(self, 10, u"10€")
        chooseBetSizer.Add(self.mediumBet, 33, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.highBet = wx.RadioButton(self, 50, u"50€")
        chooseBetSizer.Add(self.highBet, 33, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, u"¿Quiere seguir jugando?")
        sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 2)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        self.acceptBet = wx.Button(self, wx.ID_YES, "")
        sizer_2.AddButton(self.acceptBet)

        self.denyBet = wx.Button(self, wx.ID_NO, "")
        sizer_2.AddButton(self.denyBet)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_RADIOBUTTON, self.setSelectedBet, self.lowBet)
        self.Bind(wx.EVT_RADIOBUTTON, self.setSelectedBet, self.mediumBet)
        self.Bind(wx.EVT_RADIOBUTTON, self.setSelectedBet, self.highBet)
        self.Bind(wx.EVT_BUTTON, self.handleExitScreenBet, self.acceptBet)
        self.Bind(wx.EVT_BUTTON, self.handleExitScreenBet, self.denyBet)
        # end wxGlade

    def setSelectedBet(self, event):
        self.GetParent().selectedBet = event.GetId()

    def handleExitScreenBet(self, event):
       self.EndModal(event.GetId())



# end of class ChooseBet

class BlackJackPopUp(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BlackJackPopUp.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((550, 400))
        self.SetTitle("BLACKJACK")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        bitmap_1 = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap("./imgs/blackjack.jpeg", wx.BITMAP_TYPE_ANY))
        sizer_1.Add(bitmap_1, 1, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALL, 8)

        label_1 = wx.StaticText(self, wx.ID_ANY, f"¡Enhorabuena, has ganado {int(self.GetParent().getSelectedBet() * 1.5)}€!", style=wx.ALIGN_CENTER_HORIZONTAL)
        label_1.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
        sizer_2.Add(label_1, 90, wx.ALIGN_CENTER_VERTICAL, 0)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Layout()
        self.Centre()
        # end wxGlade

# end of class BlackJackPopUp

class Game(wx.App):
    def OnInit(self):
        self.player = Player()
        self.croupier = Player(isCroupier = True)
        self.deck = Mazo(Card, None)

        self.mainWindow = MainWindow(None, wx.ID_ANY, "", self.player)

        self.mainWindow.deck = self.deck

        self.chooseBetWindow = ChooseBet(self.mainWindow, wx.ID_ANY)
        
        self.SetTopWindow(self.mainWindow)
        

        buttonId = self.chooseBetWindow.ShowModal()

        if buttonId != wx.ID_YES:
            self.mainWindow.Close()
        else:
            self.mainWindow.Show()
            self.mainWindow.CenterOnScreen()
            self.mainWindow.timer.Start(1000)

        self.startGame()
        if self.mainWindow.blackJack:
           self.mainWindow.isBlackjack()

        

        self.croupierTurn()

        self.mainWindow.gamePanel.Layout()

        return True

    def startGame(self):
        self.mainWindow.addHandToGamePanel(self.croupier)
        self.croupier.hands[0].giveCard(self.croupier, self.deck, 1, self.mainWindow.selectPanel)

        self.mainWindow.addHandToGamePanel(self.player, bet = self.mainWindow.selectedBet)
        self.player.hands[0].giveCard(self.player, self.deck, 2, self.mainWindow.selectPanel)

        if self.player.hands[0].getValue() == 21:
            self.mainWindow.blackJack = True


    def croupierTurn(self):
        while self.croupier.hands[0].getValue() < 17:
            self.croupier.hands[0].giveCard(self.croupier, self.deck, 1, self.croupier.hands[0].panel)
            if self.croupier.hands[0].getValue() > 21:
               self.croupier.hands[0].setState(HAND_STATES.PASSED)
            else:
                self.croupier.hands[0].setState(HAND_STATES.CLOSED)
                self.croupier.hands[0].updateText(self.croupier)
                self.croupier.hands[0].updateColor()


        
              
            









# end of class Game

if __name__ == "__main__":

    GUIJack = Game(0)
    GUIJack.MainLoop()
